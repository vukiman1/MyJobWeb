import React, { useState } from 'react';
import { useSelector } from 'react-redux';
import {
  Card,
  Grid,
  Stack,
  Typography,
  Box,
  Button,
  Paper,
  Link,
} from '@mui/material';
import { styled } from '@mui/material/styles';

import { TabTitle } from '../../../utils/generalFunction';

// Styled components
const PaymentMethodCard = styled(Paper)(({ theme, selected }) => ({
  padding: theme.spacing(2),
  cursor: 'pointer',
  border: selected ? `2px solid ${theme.palette.primary.main}` : '2px solid transparent',
  transition: 'all 0.3s ease',
  '&:hover': {
    border: `2px solid ${theme.palette.primary.main}`,
    transform: 'translateY(-2px)',
  },
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  gap: theme.spacing(1),
}));

const AmountButton = styled(Button)(({ theme, selected }) => ({
  minWidth: '120px',
  backgroundColor: selected ? theme.palette.primary.main : 'transparent',
  color: selected ? '#fff' : theme.palette.text.primary,
  border: `1px solid ${selected ? theme.palette.primary.main : theme.palette.divider}`,
  '&:hover': {
    backgroundColor: selected ? theme.palette.primary.dark : 'rgba(68, 29, 160, 0.08)',
  },
}));

const QRCodeBox = styled(Box)(({ theme }) => ({
  width: '250px',
  height: '250px',
  border: `1px solid ${theme.palette.divider}`,
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  margin: '0 auto',
  marginTop: theme.spacing(3),
  marginBottom: theme.spacing(3),
}));

const PaymentPage = () => {
  TabTitle('Thanh to√°n Premium - Nh√† tuy·ªÉn d·ª•ng');
  const { currentUser } = useSelector((state) => state.user);

  const [selectedMethod, setSelectedMethod] = useState('');
  const [selectedAmount, setSelectedAmount] = useState(null);
  const [qrCodeUrl, setQrCodeUrl] = useState('');
  const [isQrGenerated, setIsQrGenerated] = useState(false);

  const paymentMethods = [
    { id: 'qr', name: 'QR Code', logo: 'üî≤' },
    { id: 'vnpay', name: 'VnPay', logo: 'üí≥' },
    { id: 'momo', name: 'Momo', logo: 'üì±' },
    { id: 'paypal', name: 'PayPal', logo: 'üí∞' },
  ];

  const amounts = [
    { value: 50000, label: '50.000 VNƒê' },
    { value: 100000, label: '100.000 VNƒê' },
    { value: 200000, label: '200.000 VNƒê' },
    { value: 500000, label: '500.000 VNƒê' },
  ];

  const handleMethodChange = (method) => {
    setSelectedMethod(method);
    setQrCodeUrl('');
    setIsQrGenerated(false);
  };

  const handleAmountChange = (amount) => {
    setSelectedAmount(amount);
    setQrCodeUrl('');
    setIsQrGenerated(false);
  };

  const generateQrCode = () => {
    if (!selectedAmount || !currentUser?.id) return;

    const qrUrl = `https://qr.sepay.vn/img?acc=31263287&bank=ACB&amount=${selectedAmount}&des=${currentUser.id}TTPAYMENT`;
    setQrCodeUrl(qrUrl);
    setIsQrGenerated(true);
  };

  const handleConfirmPayment = () => {
    // Handle payment confirmation
    console.log('Payment confirmed:', { selectedMethod, selectedAmount });
  };

  return (
    <Stack spacing={3}>
      {/* Balance Display */}
      <Card 
        sx={{ 
          p: 3, 
          background: 'linear-gradient(135deg, rgba(68, 29, 160, 0.8) 0%, rgba(68, 29, 160, 0.9) 100%)',
          color: 'white',
          position: 'relative',
          overflow: 'hidden'
        }}
      >
        <Box
          sx={{
            position: 'absolute',
            top: 0,
            right: 0,
            width: '150px',
            height: '150px',
            background: 'radial-gradient(circle, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 70%)',
            borderRadius: '50%',
            transform: 'translate(30%, -30%)',
          }}
        />
        <Stack spacing={1}>
          <Typography variant="h6" sx={{ opacity: 0.9 }}>
            S·ªë d∆∞ hi·ªán t·∫°i
          </Typography>
          <Typography variant="h3" sx={{ fontWeight: 'bold' }}>
            {new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(currentUser?.balance || 0)}
          </Typography>
        </Stack>
      </Card>

      {/* Payment Card */}
      <Card sx={{ p: 3 }}>
        <Typography variant="h5" gutterBottom sx={{ mb: 3 }}>
          Thanh to√°n Premium
        </Typography>

        {/* Payment Methods */}
        <Box sx={{ mb: 4 }}>
          <Typography variant="h6" gutterBottom sx={{ mb: 2 }}>
            Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n
          </Typography>
          <Grid container spacing={2}>
            {paymentMethods.map((method) => (
              <Grid item xs={12} sm={6} md={3} key={method.id}>
                <PaymentMethodCard
                  selected={selectedMethod === method.id}
                  onClick={() => handleMethodChange(method.id)}
                  elevation={selectedMethod === method.id ? 3 : 1}
                >
                  <Typography variant="h2" component="div">
                    {method.logo}
                  </Typography>
                  <Typography variant="subtitle1">{method.name}</Typography>
                </PaymentMethodCard>
              </Grid>
            ))}
          </Grid>
        </Box>

        <Grid container spacing={4}>
          {/* Left Side - Amount Selection and QR */}
          <Grid item xs={12} md={6}>
            {/* Amount Selection */}
            <Box sx={{ mb: 4 }}>
              <Typography variant="h6" gutterBottom sx={{ mb: 2 }}>
                Ch·ªçn m·ªánh gi√°
              </Typography>
              <Stack spacing={2}>
                {amounts.map((amount) => (
                  <AmountButton
                    key={amount.value}
                    variant="outlined"
                    selected={selectedAmount === amount.value}
                    onClick={() => handleAmountChange(amount.value)}
                    fullWidth
                  >
                    {amount.label}
                  </AmountButton>
                ))}
              </Stack>
            </Box>

            {/* QR Code Display */}
            {selectedMethod && selectedAmount && (
              <>
                <Typography variant="h6" gutterBottom>
                  Qu√©t m√£ QR ƒë·ªÉ thanh to√°n
                </Typography>
                <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 2 }}>
                  <Button
                    variant="contained"
                    color="primary"
                    onClick={generateQrCode}
                    disabled={!selectedAmount || !currentUser?.id}
                  >
                    T·∫°o m√£ QR
                  </Button>
                  {qrCodeUrl && (
                    <QRCodeBox>
                      <img src={qrCodeUrl} alt="QR Code" style={{ maxWidth: '100%', maxHeight: '100%' }} />
                    </QRCodeBox>
                  )}
                </Box>

                {/* Bank Information */}
                <Box sx={{ mt: 2 }}>
                  <Typography variant="subtitle1" gutterBottom sx={{ fontWeight: 'bold' }}>
                    Th√¥ng tin chuy·ªÉn kho·∫£n:
                  </Typography>
                  <Stack spacing={1}>
                    <Typography variant="body1">Ng√¢n h√†ng: ACB</Typography>
                    <Typography variant="body1">Ch·ªß t√†i kho·∫£n: V≈© Kim An</Typography>
                    <Typography variant="body1">S·ªë t√†i kho·∫£n: 31263287</Typography>
                    <Typography variant="body1">
                      N·ªôi dung chuy·ªÉn kho·∫£n: {currentUser?.id}TTPAYMENT
                    </Typography>
                  </Stack>
                </Box>
              </>
            )}
          </Grid>

          {/* Right Side - Payment Notes */}
          <Grid item xs={12} md={6}>
            <Paper sx={{ p: 3, bgcolor: 'rgba(68, 29, 160, 0.03)' }}>
              <Typography variant="h6" gutterBottom color="primary">
                L∆∞u √Ω:
              </Typography>
              <Stack spacing={2}>
                <Typography variant="body1">
                  ‚Ä¢ Vui l√≤ng ƒëi·ªÅn ch√≠nh x√°c n·ªôi dung chuy·ªÉn kho·∫£n ƒë·ªÉ th·ª±c hi·ªán n·∫°p ti·ªÅn t·ª± ƒë·ªông.
                </Typography>
                <Typography variant="body1">
                  ‚Ä¢ Kh√¥ng ch·∫•p nh·∫≠n giao d·ªãch n·∫°p ti·ªÅn t·ª´ t√†i kho·∫£n c√¥ng ty. Ch·ªâ c√°c giao d·ªãch ƒë∆∞·ª£c th·ª±c hi·ªán t·ª´ t√†i kho·∫£n c√° nh√¢n, ƒë√∫ng v·ªõi th√¥ng tin ƒë√£ ƒëƒÉng k√Ω v·ªõi ng√¢n h√†ng, m·ªõi ƒë∆∞·ª£c x·ª≠ l√Ω.
                </Typography>
                <Typography variant="body1">
                  ‚Ä¢ Ti·ªÅn s·∫Ω v√†o t√†i kho·∫£ng trong v√≤ng 1-10 ph√∫t k·ªÉ t·ª´ khi giao d·ªãch th√†nh c√¥ng. Tuy nhi√™n ƒë√¥i l√∫c do m·ªôt v√†i l·ªói kh√°ch quan, ti·ªÅn c√≥ th·ªÉ s·∫Ω v√†o ch·∫≠m h∆°n m·ªôt ch√∫t.
                </Typography>
                <Typography variant="body1">
                  ‚Ä¢ Vietcombank trong kho·∫£ng 23-3h kh√¥ng th·ªÉ ki·ªÉm tra l·ªãch s·ª≠ giao d·ªãch, c√°c giao d·ªãch trong khung gi·ªù n√†y c√≥ th·ªÉ m·∫•t t·ª´ 15 ph√∫t ƒë·∫øn 2 gi·ªù ti·ªÅn m·ªõi v√†o t√†i kho·∫£n. B·∫°n c√≥ th·ªÉ tr√°nh n·∫°p ti·ªÅn trong khung gi·ªù n√†y ƒë·ªÉ ƒë·ª° m·∫•t th·ªùi gian ch·ªù ƒë·ª£i nh√©.
                </Typography>
                <Typography variant="body1">
                  ‚Ä¢ N·∫øu qu√° l√¢u kh√¥ng th·∫•y c·∫≠p nh·∫≠t s·ªë d∆∞, Vui l√≤ng{' '}
                  <Link href="#" color="primary" sx={{ textDecoration: 'none' }}>
                    li√™n h·ªá h·ªó tr·ª£ vi√™n: T·∫°i ƒë√¢y
                  </Link>
                </Typography>
              </Stack>
            </Paper>
          </Grid>
        </Grid>

        {/* Confirm Button */}
        <Box sx={{ textAlign: 'center', mt: 4 }}>
          <Button
            variant="contained"
            color="primary"
            size="large"
            disabled={!isQrGenerated}
            onClick={handleConfirmPayment}
          >
            X√°c nh·∫≠n ƒë√£ thanh to√°n
          </Button>
        </Box>
      </Card>
    </Stack>
  );
};

export default PaymentPage;